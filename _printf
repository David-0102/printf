#include "main.h"
#include <stdarg.h>
#include <unistd.h>
#include <stddef.h>

/**
 * _printf - Custom implementation of printf function.
 * @format: The format string.
 *
 * Return: The number of characters printed (excluding the null byte).
 */
int _printf(const char *format, ...)
{
    if (format == NULL)
        return -1; // Handle NULL format string gracefully

    va_list args;
    int char_count = 0;

    va_start(args, format);

    while (*format)
    {
        if (*format == '%')
        {
            format++;
            char_count += handle_format_specifier(*format, args);
        }
        else
        {
            char_count += write(1, format, 1);
        }

        format++;
    }

    va_end(args);

    return char_count;
}

/**
 * handle_format_specifier - Handle individual format specifiers.
 * @specifier: The format specifier.
 * @args: The va_list containing the variable arguments.
 *
 * Return: The number of characters printed for this specifier.
 */
int handle_format_specifier(char specifier, va_list args)
{
    int char_count = 0;

    switch (specifier)
    {
        case 'c':
            char_count += write_char(va_arg(args, int));
            break;

        case 's':
            char_count += write_str(va_arg(args, char *));
            break;

        case '%':
            char_count += write_char('%');
            break;

        default:
            char_count += write_char('%') + write_char(specifier);
            break;
    }

    return char_count;
}

/**
 * write_char - Write a single character to stdout.
 * @ch: The character to be written.
 *
 * Return: 1 (the number of characters written).
 */
int write_char(char ch)
{
    return write(1, &ch, 1);
}

/**
 * write_str - Write a string to stdout.
 * @str: The string to be written.
 *
 * Return: The number of characters written.
 */
int write_str(const char *str)
{
    if (str == NULL)
    {
        write_str("(null)"); // Handle NULL string gracefully
        return 6; // Length of "(null)"
    }

    return write(1, str, strlen(str));
}

